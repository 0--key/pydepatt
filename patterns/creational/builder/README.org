#+AUTHOR:    Anton S. Kosinov
#+TITLE:     A design pattern sample
#+SUBTITLE:  pattern motto
#+EMAIL:     a.s.kosinov@gmail.com
#+LANGUAGE: en
#+STARTUP: showall
#+PROPERTY:header-args :results output :exports both

Hope [[http://0--key.github.io/python3/design/patterns/creational/builder.html][this page]] could elucidate this pattern in a bit explicit
manner.

* Pattern overview

** Pattern Name and Classification
   A descriptive and unique name that helps in identifying and
   referring to the pattern.
** Intent
   A description of the goal behind the pattern and the reason for
   using it.
** Also Known As
   Other names for the pattern.
** Motivation (Forces)
   A scenario consisting of a problem and a context in which this
   pattern can be used.
** Applicability
   Situations in which this pattern is usable; the context for the
   pattern.
** Structure
   A graphical representation of the pattern. Class diagrams and
   Interaction diagrams may be used for this purpose.
** Participants
   A listing of the classes and objects used in the pattern and their
   roles in the design.
** Collaboration
   A description of how classes and objects used in the pattern
   interact with each other.
** Implementation
   A description of an implementation of the pattern; the solution
   part of the pattern.
** Consequences
   A description of the results, side effects, and trade offs caused
   by using the pattern.
** Known Uses
   Examples of real usages of the pattern.
** Related Patterns
   Other patterns that have some relationship with the pattern;
   discussion of the differences between the pattern and similar
   patterns.



* Samples
  For educational purposes it would be priceless to look at the
  working code sample. Exactly to achieve a stunning clarity it might
  be helpful to compose a /test suite/ for testing the pattern
  features and dispose it nearby the pattern source code.

** SkyLark builder
   Composes some particular model on demand.

   #+HTML: <table><tbody><tr><th>Pattern code</th>
   #+HTML: <th>Test suite</th></tr><tr><td valign="top">
   #+BEGIN_SRC python :tangle skylark_builder.py :exports both
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     A SkyLark builder
     """


     class Car(object):
         """Product"""

         def __init__(self):
             self.model = None
             self.tires = None
             self.engine = None

         def __str__(self):
             return '{} | {} | {}'.format(
                 self.model, self.tires,
                 self.engine)


     class Director(object):
         """Director"""

         def __init__(self, builder):
             self._builder = builder

         def construct_car(self):
             pass

         def get_car(self):
             pass


     class Builder(object):
         """Abstract Builder"""

         def __init__(self):
             self.car = None

         def create_new_car(self):
             self.car = Car()


     class SkyLarkBuilder(Builder):
         """Concrete Builder --> provides 
         parts and tools to work on the 
         parts"""

         def add_model(self):
             self.car.model = "Skylark"

         def add_tires(self):
             self.car.tires = "Regular tires"
   #+END_SRC

   #+RESULTS:

   #+HTML: </td><td valign="top">

   #+BEGIN_SRC python :tangle test_skylark_builder.py
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     An attempt to illustrate how it works
     """
     import unittest


     class TestSimpleBehavior(unittest.TestCase):

         def setUp(self):
             pass

         def tearDown(self):
             pass

   #+END_SRC

   #+HTML: </td></tr></tbody></table>

** A premises builder

   #+HTML: <table><tbody><tr><th>Pattern code</th>
   #+HTML: <th>Test suite</th></tr><tr><td valign="top">
   #+BEGIN_SRC python :tangle rooms_builder.py :exports both
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     A dwelling builder
     """


     class Director(object):

         def __init__(self):
             self.builder = None

         def construct_building(self):
             self.builder.new_building()
             self.builder.build_floor()
             self.builder.build_size()

         def get_building(self):
             return self.builder.building


     class Builder(object):
         """
         Abstract Builder
         """

         def __init__(self):
             self.building = None

         def new_building(self):
             self.building = Building()

         def build_floor(self):
             raise NotImplementedError

         def build_size(self):
             raise NotImplementedError


     class BuilderHouse(Builder):
         """Concrete Builder"""

         def build_floor(self):
             self.building.floor = 'One'

         def build_size(self):
             self.building.size = 'Big'


     class BuilderFlat(Builder):

         def build_floor(self):
             self.building.floor = 'More than One'

         def build_size(self):
             self.building.size = 'Small'


     class Building(object):
         """Product"""

         def __init__(self):
             self.floor = None
             self.size = None

         def __repr__(self):
             return 'Floor: {0.floor} | Size: {0.size}'.format(self)

     director = Director()
     director.builder = BuilderHouse()
     director.construct_building()
     building = director.get_building()
     print(building)
     director.builder = BuilderFlat()
     director.construct_building()
     building = director.get_building()
     print(building)
   #+END_SRC

   #+RESULTS:
   : Floor: One | Size: Big
   : Floor: More than One | Size: Small

   #+HTML: </td><td valign="top">

   #+BEGIN_SRC python :tangle test_rooms_builder.py
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     An attempt to illustrate how it works
     """
     import unittest


     class TestSimpleBehavior(unittest.TestCase):

         def setUp(self):
             pass

         def tearDown(self):
             pass

   #+END_SRC

   #+HTML: </td></tr></tbody></table>
