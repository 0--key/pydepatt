#+AUTHOR:    Anton S. Kosinov
#+TITLE:     A factory design sample
#+SUBTITLE:  pet yields by the factory
#+EMAIL:     a.s.kosinov@gmail.com
#+LANGUAGE: en
#+STARTUP: showall
#+PROPERTY:header-args :results output :exports both

* Pattern overview

** Common features

** Distinct features

* Samples
  For educational purposes it is convenient to look at the working
  sample.
  | test | table |
  |------+-------|
  | some | data  |
** Pet factory
   Creates some particular animal out from arbitrary number already
   defined pets.
   #+HTML:<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
   #+HTML:<colgroup>
   #+HTML:<col  class="org-left" />
   #+HTML:<col  class="org-left" />
   #+HTML:</colgroup>
   #+HTML:<thead>
   #+HTML:<tr>
   #+HTML:<th scope="col" class="org-left">Pattern code</th>
   #+HTML:<th scope="col" class="org-left">Test suite</th>
   #+HTML:</tr>
   #+HTML:</thead>
   #+HTML:<tbody>
   #+HTML:<tr>
   #+HTML:<td class="org-left">
   #+BEGIN_SRC python :tangle pet_factory.py :exports both
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     A pet factory abstraction
     """


     class Dog(object):
         """A simple dog class"""

         def __init__(self, name):
             self._name = name

         def speak(self):
             return "Woof!"


     class Cat(object):
         """A simple cat class"""

         def __init__(self, name):
             self._name = name

         def speak(self):
             return "Meow!"


     def spawn_pet(pet="dog"):
         """The factory method"""
         pets = dict(dog=Dog("Hope"), cat=Cat("Peace"))
         return pets[pet]

     d = spawn_pet("dog")
     print(d.speak())
     c = spawn_pet("cat")
     print(c.speak())
   #+END_SRC

   #+RESULTS:
   : Woof!
   : Meow!

   #+HTML:<td class="org-left">
   #+BEGIN_SRC python :tangle test_pet_factory.py
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     An attempt to illustrate how pet_factory works
     """
     import unittest
     from pet_factory import Dog, Cat, spawn_pet


     class TestPetBehavior(unittest.TestCase):

         def setUp(self):
             self.D = Dog('Hound')

         def test_dog_init_name(self):
             self.assertEqual(self.D._name, 'Hound')

         def test_dog_speak_ability(self):
             self.assertEqual(self.D.speak(), 'Woof!')
   #+END_SRC
   #+HTML:</tr>
   #+HTML:</tbody>

** Weapon factory
   #+HTML:<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
   #+HTML:<colgroup>
   #+HTML:<col  class="org-left" />
   #+HTML:<col  class="org-left" />
   #+HTML:</colgroup>
   #+HTML:<thead>
   #+HTML:<tr>
   #+HTML:<th scope="col" class="org-left">Pattern code</th>
   #+HTML:<th scope="col" class="org-left">Test suite</th>
   #+HTML:</tr>
   #+HTML:</thead>
   #+HTML:<tbody>
   #+HTML:<tr>
   #+HTML:<td class="org-left">
   #+BEGIN_SRC python :tangle weapon_factory.py :exports both
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     How to choose an arbitrary weapon
     """
     from random import randrange


     class Weapon(object):
         name = None
         cost = None

         @staticmethod
         def get_weapon(x):
             if x == 0:
                 return Knife()
             if x == 1:
                 return Gun()


     class Knife(Weapon):
         name = 'Knife'
         cost = 20.00


     class Gun(Weapon):
         name = 'Gun'
         cost = 300.00


     # Create 5 random weapons
     for _ in range(5):
         w = Weapon.get_weapon(randrange(2))
         print(w.name, w.cost)
   #+END_SRC

   #+RESULTS:
   : Knife 20.0
   : Knife 20.0
   : Gun 300.0
   : Gun 300.0
   : Gun 300.0
   #+HTML:<td class="org-left">
   #+BEGIN_SRC python :tangle test_weapon_factory.py
     #!/usr/bin/env python
     # -*- coding: utf-8 -*-
     """
     An attempt to illustrate how sample_code works
     """
     import unittest
   #+END_SRC
   #+HTML:</tr>
   #+HTML:</tbody>

** Another factory
   #+HTML:<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
   #+HTML:<colgroup>
   #+HTML:<col  class="org-left" />
   #+HTML:<col  class="org-left" />
   #+HTML:</colgroup>
   #+HTML:<thead>
   #+HTML:<tr>
   #+HTML:<th scope="col" class="org-left">Pattern code</th>
   #+HTML:<th scope="col" class="org-left">Test suite</th>
   #+HTML:</tr>
   #+HTML:</thead>
   #+HTML:<tbody>
   #+HTML:<tr>
   #+HTML:<td class="org-left">
   #+HTML:Some text
   #+HTML:<td class="org-left">
   #+HTML:Another text
   #+HTML:</tr>
   #+HTML:</tbody>
